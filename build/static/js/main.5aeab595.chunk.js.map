{"version":3,"sources":["utils/selectOptions.js","containers/Main/Main.module.scss","components/Tags/TagsNode.module.scss","components/Tags/TagsEntryLine.module.scss","components/Tags/TagsSelection.module.scss","containers/Tags/TagsEditor.module.scss","components/EntryLine/EntryLine.module.scss","containers/EntryManager/EntryManager.module.scss","containers/Tags/TagsManager.module.scss","App.module.scss","utils/tagsParseMap.js","components/FormElements/Button.module.scss","components/FormElements/Input.module.scss","axios.js","components/Tags/TagsEntryLine.js","components/EntryLine/EntryLine.js","components/Tags/TagsNode.js","containers/Tags/TagsTree.js","components/Tags/TagsSelection.js","utils/tagsParseSort.js","utils/tagsParseTree.js","utils/tagsParseSelection.js","utils/tagsParseInitSel.js","containers/Tags/TagsManager.js","components/FormElements/Input.js","components/FormElements/Button.js","containers/Main/Main.js","utils/inputValidation.js","containers/Tags/TagsEditor.js","containers/EntryManager/EntryManager.js","components/Wrappers/EditEntry.js","components/Wrappers/AddEntry.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","importance","value","presentation","rus","eng","status","Main","Filter","TagsContainer","Inputs","Button","Tag","Buttons","Content","ButtonExpand","Label","TagName","TagPath","SelectionArea","AddTag","SelectionItems","SelectionItem","EntryContainer","InputsContainer","ResultSection","EntryLine","Contents","Line","LineContent","Title","Attributes","TagsBox","TagsTree","App","AppHeader","array","map","Map","i","length","attributes","hasOwnProperty","parent","parentGi","ancestors","concat","push","descendantsAll","descendantsDir","descendantsAllNodes","descendantsDirNodes","j","level","gi","set","childrenGi","Success","Danger","Input","instance","axios","create","baseURL","headers","Accept","defaults","post","TagsEntryLine","props","tags","tag","currTag","react_default","a","createElement","className","classes","name","path","ancestor","key","_id","join","parseTags","Fragment","title","Tags","Tags_TagsEntryLine","Description","description","datePresent","importancePresent","statusPresent","react_router_dom","to","pathname","state","entryData","date","Object","toConsumableArray","id","onClick","e","window","confirm","deleteClick","TagsNode","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkboxRef","React","createRef","current","indeterminate","buttonExpandNode","buttonExpandNodeContent","expanded","nodeExpandClick","padding","paddingLeft","toString","checked","selected","checkboxElement","type","onChange","clickSelect","ref","buttonEditTag","buttonAddChildTag","buttonDeleteTag","mode","tagEditClick","tagAddChildClick","tagDeleteClick","style","Component","index","visible","Tags_TagsNode","assign","nodeExpandClickHandler","selectedHandler","TagsSelection","buttonExpandedContent","selectionContent","tagsSelected","treeExpanded","treeExpansionClick","showSelectionBox","buttonAddTag","tagAddClick","tagsParseSort","data","sorted","sort","field","order","arguments","undefined","b","varA","toUpperCase","varB","comparison","sortArrayObj","arrayRoot","filter","tagsParseSortRec","currentLevel","forEach","tagCL","nextLevelChildren","tagNL","Error","parseTagsTree","initSelection","initSelectionGis","mapId","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","initSelectionId","err","return","get","typeNode","tagsParseSelection","result","CLOS","tagsParseInitSel","tagGi","tagsMap","ct","gisIndetTrue","gisSelTrue","apply","_i","_gisSelTrue","_i2","_gisIndetTrue","TagsManager","gisSelToggle","gisSelValue1","value1","target","gisIndetFalse","gisSelFalse","childSelected","childIndeterminate","totalDDS","totalDDI","childGi","maxDD","currDescSelected","currDescIndet","descGi","descendant","Number","console","log","stateUpdate","gis","treeExpansionHandler","setState","gisExpand","gisVisible","selectedIdsHandler","selectedTags","selectedIdsSet","Set","selectedIdsEP","ancGis","add","selectedTagsIdsHandler","Array","from","ancestorsIds","ancestorsGis","ancestorsNames","siblingsGis","siblingsNames","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","siblingGi","siblingName","_tag$ancestorsIds","parentId","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_siblingsGis","tagsIds","tagsShouldBeUpdated","_this2","axiosInstance","then","response","initSelTagsIds","initSelTagsGis","tagsParseTree","tagsParseMap","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","catch","_this3","tagsUpdated","tagsUpdatedNotifier","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","updates","prevState","tagsToUpdate","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","objectSpread","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_ref4","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","tagsTree","Tags_TagsTree","Tags_TagsSelection","inputElement","inputClasses","invalid","shouldValidate","touched","elementType","label","elementConfig","changed","options","option","showAny","defaultValue","btnType","clicked","disabled","children","filterConfig","selectedTagsSearch","selectedTagsEP","date1","date2","editForm","selectOptions","filterRelevant","entries","entriesVisMap","selectedTagsHandler","currState","nextSelectedTagsEP","nextSelectedTagsSearch","currSelectedTagsEP","currSelectedTagsSearch","inputChangedHandler","event","inputIdentifier","currDate2","Date","getTime","nextDate1","isNaN","currDate1","nextDate2","updatedEditForm","updatedFormElement","entryDeleteHandler","delete","entriesFiltering","entry","entryIndex","tagsCheck","date1Check","date2Check","importanceCheck","statusCheck","includes","entryDate","entriesFilterHandler","configStateHandler","formElementsArray","config","entryLines","form","formElement","FormElements_Input","entriesToShow","dateObj","dateFormatted","getDate","padStart","getMonth","getFullYear","_selectOptions$import","slicedToArray","_selectOptions$status","components_EntryLine_EntryLine","Tags_TagsManager","FormElements_Button","EntryLines","validate","rules","isValid","required","trim","notEqualList","number","minLength","min","max","TagsEditor","currentTagId","fullPath","display","placeholder","readOnly","validation","valid","editMode","buttonName","formIsValid","visibility","message","payload","tagEditHandler","tagAddChildHandler","tagDeleteHandler","ids","newResult","tagPostHandler","button","resultOutput","tagAddHandler","EntryManager","toISOString","substr","entryPostHandler","Boolean","EditEntry","containers_EntryManager_EntryManager","location","stateHandler","activeStyle","textDecoration","exact","react_router","render","containers_Main_Main","component","AddEntry","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5aeab595.chunk.js","sourcesContent":["const selectOptions = {\n  importance: [\n    {\n      value: '_any',\n      presentation: {\n        rus: 'Любая',\n        eng: 'Not defined',\n      },\n    },\n    {\n      value: 'low',\n      presentation: {\n        rus: 'Низкая',\n        eng: 'Low',\n      },\n    },\n    {\n      value: 'medium',\n      presentation: {\n        rus: 'Средняя',\n        eng: 'Medium',\n      },\n    },\n    {\n      value: 'high',\n      presentation: {\n        rus: 'Высокая',\n        eng: 'High',\n      },\n    },\n  ],\n  status: [\n    {\n      value: '_any',\n      presentation: {\n        rus: 'Любой',\n        eng: 'Not defined',\n      },\n    },\n    {\n      value: 'notStarted',\n      presentation: {\n        rus: 'Не началась',\n      },\n    },\n    {\n      value: 'wip',\n      presentation: {\n        rus: 'В работе',\n      },\n    },\n    {\n      value: 'completed',\n      presentation: {\n        rus: 'Завершена',\n      },\n    },\n    {\n      value: 'postponed',\n      presentation: {\n        rus: 'Отложена',\n      },\n    },\n  ],\n};\n\nmodule.exports = selectOptions;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Main_Main__2I_Pl\",\"Filter\":\"Main_Filter__2NhL_\",\"TagsContainer\":\"Main_TagsContainer__bV2vR\",\"Inputs\":\"Main_Inputs__2HgiG\",\"Button\":\"Main_Button__2wGWw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Tag\":\"TagsNode_Tag__nEBEA\",\"Buttons\":\"TagsNode_Buttons__2HYfy\",\"Content\":\"TagsNode_Content__2kx0s\",\"ButtonExpand\":\"TagsNode_ButtonExpand__NxO2v\",\"Label\":\"TagsNode_Label__1BCyG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Tag\":\"TagsEntryLine_Tag__28-uu\",\"TagName\":\"TagsEntryLine_TagName__2Z7ra\",\"TagPath\":\"TagsEntryLine_TagPath__hE4PJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SelectionArea\":\"TagsSelection_SelectionArea__1nxQA\",\"AddTag\":\"TagsSelection_AddTag__3pr_E\",\"SelectionItems\":\"TagsSelection_SelectionItems__3R9w_\",\"SelectionItem\":\"TagsSelection_SelectionItem__1jJCn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"EntryContainer\":\"TagsEditor_EntryContainer__3n4v1\",\"TagsContainer\":\"TagsEditor_TagsContainer__22nuv\",\"InputsContainer\":\"TagsEditor_InputsContainer__3yheS\",\"ResultSection\":\"TagsEditor_ResultSection__1uTZT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"EntryLine\":\"EntryLine_EntryLine__3KlWM\",\"Contents\":\"EntryLine_Contents__3k9co\",\"Line\":\"EntryLine_Line__16ROe\",\"Label\":\"EntryLine_Label__1FAOV\",\"LineContent\":\"EntryLine_LineContent__1wxwT\",\"Title\":\"EntryLine_Title__16Av2\",\"Attributes\":\"EntryLine_Attributes__22fB2\",\"Buttons\":\"EntryLine_Buttons__rrWDC\",\"Button\":\"EntryLine_Button__3sw1D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"EntryContainer\":\"EntryManager_EntryContainer__3oPhZ\",\"TagsContainer\":\"EntryManager_TagsContainer__3qYhH\",\"InputsContainer\":\"EntryManager_InputsContainer__Sxe_e\",\"ResultSection\":\"EntryManager_ResultSection__2Mvlw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagsBox\":\"TagsManager_TagsBox__13Xhi\",\"TagsTree\":\"TagsManager_TagsTree__3BFNv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3zNbt\",\"AppHeader\":\"App_AppHeader__iwyFw\"};","/** returns a map with gi values:\n *    - parent\n *    - ancestors\n *    - descendantsAll\n *    - descendantsAllNodes\n *    - descendantsDir\n *    - descendantsDirNodes\n * modifies array (delets parentGI, childrenGI)\n */\nconst tagsParseMap = array => {\n  const map = new Map();\n  /** adding parent, descendantsDir, descendantsDirNodes */\n  for (let i = 0; i < array.length; i++) {\n    const attributes = {};\n\n    if (array[i].hasOwnProperty('parentGi')) {\n      let parent = array[i].parentGi;\n      attributes.parent = parent;\n      attributes.ancestors = [].concat(parent);\n      while (array[parent].hasOwnProperty('parentGi')) {\n        attributes.ancestors.push(array[parent].parentGi);\n        parent = array[parent].parentGi;\n      }\n    }\n\n    /** descendants loop */\n    attributes.descendantsAll = [];\n    attributes.descendantsDir = [];\n    attributes.descendantsAllNodes = [];\n    attributes.descendantsDirNodes = [];\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[j].level <= array[i].level) {\n        break;\n      } else if (\n        array[j].level === array[i].level + 1 &&\n        array[j].hasOwnProperty('expanded')\n      ) {\n        attributes.descendantsDir.push(array[j].gi);\n        attributes.descendantsDirNodes.push(array[j].gi);\n        attributes.descendantsAll.push(array[j].gi);\n        attributes.descendantsAllNodes.push(array[j].gi);\n      } else if (array[j].level === array[i].level + 1) {\n        attributes.descendantsDir.push(array[j].gi);\n        attributes.descendantsAll.push(array[j].gi);\n      } else if (\n        array[j].level > array[i].level + 1 &&\n        array[j].hasOwnProperty('expanded')\n      ) {\n        attributes.descendantsAll.push(array[j].gi);\n        attributes.descendantsAllNodes.push(array[j].gi);\n      } else if (array[j].level > array[i].level + 1) {\n        attributes.descendantsAll.push(array[j].gi);\n      }\n    }\n\n    map.set(array[i].gi, attributes);\n  }\n  /** good blow on performance? almost doubles the time to perform */\n  for (let i = 0; i < array.length; i++) {\n    delete array[i].parentGi;\n    delete array[i].childrenGi;\n  }\n  return map;\n};\n\nmodule.exports = tagsParseMap;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__1YEJY\",\"Success\":\"Button_Success__3Ke1G\",\"Danger\":\"Button_Danger__3eCGi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2wRhj\"};","import axios from \"axios\";\n\nconst instance = axios.create({\n\tbaseURL: \"https://pfentries.herokuapp.com\",\n\theaders: {'Accept': 'application/json'}\n});\n\ninstance.defaults.headers.post['Content-Type'] = 'application/json';\n\n// instance.interceptors.request...\n\nexport default instance;","import React from 'react';\n\nimport classes from './TagsEntryLine.module.scss';\n \nconst TagsEntryLine = (props) => {\n  \n  const parseTags = (tags) => {\n    return tags.map(tag => {\n      const currTag = <span className={classes.TagName}>{tag.name + \" \"}</span>;\n      if (tag.ancestors && tag.ancestors.length > 0) {\n        const path = tag.ancestors.map(ancestor => {\n          return ancestor.name;\n        });\n        return <span key={tag._id}  className={classes.Tag}>{currTag}<span className={classes.TagPath}>{'(' + path.join('/') + '/' + tag.name + ')'}</span></span>\n      } else return  <span key={tag._id} className={classes.Tag}>{currTag}</span>\n    })\n  };\n  \n  let tags;\n  if (!props.tags.length) {\n    tags = 'Без тэга (категории)';\n  } else {\n    tags = parseTags(props.tags);\n  }\n\n  return (\n    <React.Fragment>\n      {tags}\n    </React.Fragment>\n  );\n}\n \nexport default TagsEntryLine;\n\n// selectedTagsEP: [\n//   {\n//     parent: '5ccbd7909b09b024caadf24a',\n//     ancestors: [\n//       { _id: '5ccbd769c8504f249016d3da', name: 'Work' },\n//       { _id: '5ccbd7909b09b024caadf24a', name: 'Project1' },\n//     ],\n//     _id: '5ccbd7b75f39702501bb4347',\n//     name: 'Stage1',\n//     description: 'Description of stage1 of project 1',\n//     level: 3,\n//     __v: 0,\n//   },\n// ],","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport TagsEntryLine from '../Tags/TagsEntryLine';\nimport classes from './EntryLine.module.scss';\n\nconst EntryLine = (props) => {\n  return (\n    <div className={classes.EntryLine}>\n      <div className={classes.Contents}>\n        <div className={`${classes.Line} ${classes.Title}`}>\n          <span className={classes.Label}>Название</span>\n          <span className={classes.LineContent}>{props.title}</span>\n        </div>\n        <div className={`${classes.Line} ${classes.Tags}`}>\n          <span className={classes.Label}>Тэги</span>\n          <span className={classes.LineContent}>\n            <TagsEntryLine tags={props.tags} />\n          </span>\n        </div>\n        <div className={`${classes.Line} ${classes.Description}`}>\n          <span className={classes.Label}>Содержание</span>\n          <span className={classes.LineContent}>{props.description}</span>\n        </div>\n      </div>\n      <div className={classes.Attributes}>\n        <p>{props.datePresent}</p>\n        <p>{props.importancePresent}</p>\n        <p>{props.statusPresent}</p>\n        <div className={classes.Buttons}>\n          <Link\n            to={{\n              pathname: '/editEntry',\n              state: {\n                entryData: {\n                  title: props.title,\n                  description: props.description,\n                  date: props.date,\n                  importance: props.importance,\n                  status: props.status,\n                  tags: [...props.tags],\n                  id: props.id,\n                },\n              },\n            }}\n          >\n            <button className={classes.Button}>Исправить</button>\n          </Link>\n          <button\n            className={classes.Button}\n            onClick={(e) => {\n              if (window.confirm('Уверены, что хотите удалить эту запись?')) {\n                return props.deleteClick(e, props.id);\n              }\n            }}\n          >\n            Удалить\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EntryLine;\n","import React, { Component } from 'react';\n\nimport classes from './TagsNode.module.scss';\n\nclass TagsNode extends Component {\n  constructor(props) {\n    super(props);\n    this.checkboxRef = React.createRef();\n  }\n\n  componentDidMount() {\n    if (this.checkboxRef.current) {\n      this.checkboxRef.current.indeterminate = this.props.indeterminate;\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.checkboxRef.current) {\n      this.checkboxRef.current.indeterminate = this.props.indeterminate;\n    }\n  }\n\n  render() {\n    /**Checking if expand button is required */\n    let buttonExpandNode, buttonExpandNodeContent;\n    if (this.props.hasOwnProperty('expanded')) {\n      if (this.props.expanded) buttonExpandNodeContent = '\\u{25BC}';\n      else buttonExpandNodeContent = '\\u{25B6}';\n      buttonExpandNode = (\n        <button\n          className={classes.ButtonExpand}\n          onClick={this.props.nodeExpandClick}\n        >\n          {buttonExpandNodeContent}\n        </button>\n      );\n    } else {\n      buttonExpandNode = null;\n      buttonExpandNodeContent = null;\n    }\n    /** Determine padding-left based on the level of the tag */\n    const padding = {\n      paddingLeft: (this.props.level * 1.5).toString() + 'rem',\n    };\n    /** Setting checked as per 'selected' status */\n    const checked = this.props.selected;\n    let checkboxElement = (\n      <input\n        type='checkbox'\n        onChange={this.props.clickSelect}\n        checked={checked}\n        ref={this.checkboxRef}\n      />\n    );\n    /** Input checkbox visibility Additional buttons for 'tagsEditor mode */\n    let buttonEditTag = null,\n      buttonAddChildTag = null,\n      buttonDeleteTag = null;\n    if (this.props.mode === 'tagsEditor') {\n      checkboxElement = null;\n      buttonEditTag = (\n        <button title={`Редактировать тэг ${this.props.name}`} onClick={this.props.tagEditClick}>\n          \t&#9997;\n        </button>\n      );\n      buttonAddChildTag = (\n        <button\n          title={`Добавить новый дочерний тэг к тэгу ${this.props.name}`}\n          onClick={this.props.tagAddChildClick}\n        >\n          \t&#9166;\n        </button>\n      );\n      buttonDeleteTag = (\n        <button title={`Удалить тэг ${this.props.name}`} onClick={this.props.tagDeleteClick}>\n          \t\t&#128465;\n        </button>\n      );\n    }\n    return (\n      <li className={classes.Tag} title={this.props.description}>\n        <span className={classes.Buttons}>\n          {buttonEditTag}\n          {buttonDeleteTag}\n          {buttonAddChildTag}\n        </span>\n\n        <span className={classes.Content} style={padding}>\n          {buttonExpandNode}\n          <label>\n            {checkboxElement}\n            <span className={classes.Label}>{this.props.name}</span>\n          </label>\n        </span>\n      </li>\n    );\n  }\n}\n\nexport default TagsNode;\n","import React, { Component } from 'react';\n\nimport TagsNode from '../../components/Tags/TagsNode';\n\nclass TagsTree extends Component {\n  render() {\n    const tags = this.props.tags.map((tag, index) => {\n      if (tag.visible) {\n        return (\n          <TagsNode\n            key={tag.gi}\n            {...tag}\n            nodeExpandClick={(e) =>\n              this.props.nodeExpandClickHandler(e, tag.gi, tag.expanded)\n            }\n            clickSelect={(e) => this.props.selectedHandler(e, tag.gi)}\n            tagEditClick={(e) => this.props.tagEditClick(e, tag.gi)}\n            tagDeleteClick={(e) => {\n              if (\n                window.confirm(\n                  'Если к этому тэгу привязаны записи, тэг не будет удален. При удалении будут удалены также все дочерние тэги. Продолжаем?'\n                )\n              ) {\n                return this.props.tagDeleteClick(e, tag.gi);\n              }\n            }}\n            tagAddChildClick={(e) => this.props.tagAddChildClick(e, tag.gi)}\n            mode={this.props.mode}\n          />\n        );\n      }\n    });\n    return <div>{tags}</div>;\n  }\n}\n\nexport default TagsTree;\n","import React from 'react';\n\nimport classes from './TagsSelection.module.scss';\n\n\nconst TagsSelection = props => {\n  const { tagsSelected, treeExpanded, treeExpansionClick } = props;\n  /** Defining the content of the expansion button */\n  let buttonExpandedContent;\n  if (treeExpanded) {\n    buttonExpandedContent = '\\u{25BC}';\n  } else {\n    buttonExpandedContent = '\\u{25B2}';\n  }\n  /** Defining contents of the selected tags area */\n  let selectionContent;\n  if (tagsSelected.length === 0 || !props.showSelectionBox) {\n    selectionContent = <span>Выберете тэги...</span>;\n  } else {\n    selectionContent = (\n      <ul className={classes.SelectionItems}>\n        {tagsSelected.map(tag => (\n          <li\n            className={classes.SelectionItem}\n            gi={tag.gi}\n            key={tag._id}\n            title={tag.description}\n          >\n            <span>{tag.name}</span>\n            <label title=\"Удалить выбранный тэг\">\n            &#10799;\n              <input type='checkbox' onChange={e => props.selectedHandler(e, tag.gi)} checked />\n            </label>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n  /** Defining Add level 1 tag button */\n  let buttonAddTag = null;\n  if (props.mode === 'tagsEditor') {\n    buttonAddTag = (\n      <button className={classes.AddTag} title='Добавить новый тэг 1-го уровня' onClick={props.tagAddClick}>\n        Новый тэг\n      </button>\n    );\n  }\n\n  return (\n    <div className={classes.SelectionArea}>\n      {selectionContent}\n      <button onClick={treeExpansionClick}>{buttonExpandedContent}</button>\n      {buttonAddTag}\n    </div>\n  );\n};\n\nexport default TagsSelection;\n","const sortArrayObj = (field, order = 'asc') => {\n  return function(a, b) {\n    if (!a.hasOwnProperty(field) || !b.hasOwnProperty(field)) {\n      // property doesn't exist on either object\n      return 0;\n    }\n    const varA =\n      typeof a[field] === 'string' ? a[field].toUpperCase() : a[field];\n    const varB =\n      typeof b[field] === 'string' ? b[field].toUpperCase() : b[field];\n    let comparison = 0;\n    if (varA > varB) comparison = 1;\n    else if (varA < varB) comparison = -1;\n    return order === 'desc' ? comparison * -1 : comparison;\n  };\n};\n\nconst tagsParseSort = data => {\n  /**Defining recursion to work from level1 */\n\n\n  const tagsParseSortRec = (array, currentLevel, level = 1) => {\n    currentLevel.forEach(tagCL => {\n      let nextLevelChildren = array.filter(tagNL => {\n        return +tagNL.level === +level + 1 && tagCL._id === tagNL.parent;\n      });\n      if (nextLevelChildren.length === 0) {\n        sorted.push(tagCL);\n      } else {\n        sorted.push(tagCL);\n        tagsParseSortRec(array, nextLevelChildren, level + 1);\n      }\n    });\n  };\n  /** Initializing level1 */\n  const sorted = [];\n  data.sort(sortArrayObj('name'));\n  const arrayRoot = data.filter(tag => tag.level === 1);\n  const arrayNonRoot = data.filter(tag => tag.level !== 1);\n  tagsParseSortRec(arrayNonRoot, arrayRoot);\n  if (sorted.length === data.length) return sorted;\n  else {\n    throw new Error('Initial tags sorting did not go well! Check algorithm or data integrity!');\n  }\n};\n\nexport default tagsParseSort;","const parseTagsTree = (array, initSelection, mode) => {\n  /** Assigning gi to each tag */\n  array.forEach((tag, index) => {\n    tag.gi = index;\n  });\n\n  let initSelectionGis = [];\n\n  const mapId = new Map();\n  /** aux initializing of maps to reduce big O of parsing\n   * and forming array of selected tags gis for input array of selected tags ids\n   */\n  for (const tag of array) {\n    mapId.set(tag._id, tag);\n    if (initSelection.length > 0) {\n      for (const initSelectionId of initSelection) {\n        if (tag._id === initSelectionId) initSelectionGis.push(tag.gi);\n      }\n    }\n  }\n\n  for (let i = 0; i < array.length; i++) {\n    /** adding:\n     *  parentGI, childrenGI for easy reference\n     * expanded is false for those having childred\n     * counterDDS for direct descendants selected counter\n     */\n    if (array[i].parent !== null) {\n      array[i].parentGi = mapId.get(array[i].parent).gi;\n      if (!array[array[i].parentGi].childrenGi) {\n        array[array[i].parentGi].childrenGi = [array[i].gi];\n        array[array[i].parentGi].expanded = false;\n\n        array[array[i].parentGi].typeNode = true;\n      } else {\n        array[array[i].parentGi].childrenGi.push(array[i].gi);\n      }\n    }\n    /** adding visibility, expansion and selection booleans:\n     * visibility depends on mode\n     * selected - all false\n     * indeterminate\n     */\n\n    if (array[i].level === 1) {\n      array[i].visible = true;\n    } else array[i].visible = false;\n\n    array[i].selected = false;\n    array[i].indeterminate = false;\n  }\n  return initSelectionGis;\n};\n\nexport default parseTagsTree;\n","/** Parses array of tags to determing what to show in Selection Box\n * It is different from the tags that should go to the database\n */\nconst tagsParseSelection = a => {\n  /** initializing current level of selection CLOS to a big number and result to empty array */\n  const result = [];\n  let CLOS = 1000;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i].selected && a[i].level <= CLOS) {\n      result.push(a[i]);\n      CLOS = a[i].level;\n    } else if (a[i].selected && a[i].level > CLOS) {\n      continue;\n    } else if (!a[i].selected && a[i].level <= CLOS) {\n      CLOS = 1000;\n    }\n  }\n  return result;\n};\n\nexport default tagsParseSelection;\n","const tagsParseInitSel = (tagGi, tags, tagsMap) => {\n  const ct = tags[tagGi];\n \n  const gisIndetTrue = [];\n  const gisSelTrue = [tagGi];\n  /** handling self and descendants */\n  if (ct.typeNode === true) {\n    gisSelTrue.push(...tagsMap.get(tagGi).descendantsAll);\n  }\n  /** handling ancestors chain if any */\n  if (ct.parent) {\n    /** getting the list of ancestors and pushing them to the array to set intermediate to true\n     */\n    gisIndetTrue.push(...tagsMap.get(tagGi).ancestors);\n  }\n  \n  /** setting selected to true for self and descendants */\n  for (const gi of gisSelTrue) {\n    tags[gi].selected = true;\n  }\n  /** setting indeterminate to true for ancestors */\n  for (const gi of gisIndetTrue) {\n    tags[gi].indeterminate = true;\n  }\n};\n\nexport default tagsParseInitSel;\n","import React, { Component } from 'react';\n\nimport axiosInstance from '../../axios';\nimport TagsTree from './TagsTree';\nimport TagsSelection from '../../components/Tags/TagsSelection';\nimport tagsParseSort from '../../utils/tagsParseSort';\nimport tagsParseTree from '../../utils/tagsParseTree';\nimport tagsParseMap from '../../utils/tagsParseMap';\nimport tagsParseSelection from '../../utils/tagsParseSelection';\nimport tagsParseInitSel from '../../utils/tagsParseInitSel';\nimport classes from './TagsManager.module.scss';\n\nclass TagsManager extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tags: [],\n      treeExpanded: true,\n      tagsShouldBeUpdated: false,\n    };\n  }\n\n  componentDidMount() {\n\n    //mode tagsEditor\n    axiosInstance\n      .get('/api/tagsAll')\n      .then((response) => {\n        let tags = tagsParseSort(response.data);\n        let initSelTagsIds = [];\n\n        if (this.props.initSelTagsIds[0] === '_all') {\n          tags.forEach((tag) => {\n            if (tag.level === 1) initSelTagsIds.push(tag._id);\n          });\n        } else initSelTagsIds = this.props.initSelTagsIds;\n        const initSelTagsGis = tagsParseTree(tags, initSelTagsIds, this.props.mode);\n        const tagsMap = tagsParseMap(tags);\n        for (const tagGi of initSelTagsGis) {\n          tagsParseInitSel(tagGi, tags, tagsMap);\n        }\n        this.setState({ tags, tagsMap });\n      })\n      .catch((e) => {\n        console.log('TAGSMANAGER: Error loading tags');\n      });\n  }\n\n  componentDidUpdate() {\n    \n    if (this.props.tagsUpdated) {\n      this.setState({\n        tagsShouldBeUpdated: true,\n      });\n      this.props.tagsUpdatedNotifier();\n    }\n\n    if (this.state.tagsShouldBeUpdated) {\n      axiosInstance\n        .get('/api/tagsAll')\n        .then((response) => {\n          let tags = tagsParseSort(response.data);\n          let initSelTagsIds = [];\n\n          if (this.props.initSelTagsIds[0] === '_all') {\n            tags.forEach((tag) => {\n              if (tag.level === 1) initSelTagsIds.push(tag._id);\n            });\n          } else initSelTagsIds = this.props.initSelTagsIds;\n          const initSelTagsGis = tagsParseTree(tags, initSelTagsIds);\n          const tagsMap = tagsParseMap(tags);\n          for (const tagGi of initSelTagsGis) {\n            tagsParseInitSel(tagGi, tags, tagsMap);\n          }\n          this.setState({ tags, tagsMap, tagsShouldBeUpdated: false });\n        })\n        .catch((e) => {\n          console.log('TAGSMANAGER: Error loading tags');\n        });\n    }\n\n    const tagsSelected = tagsParseSelection(this.state.tags);\n\n    this.selectedIdsHandler(tagsSelected);\n  }\n\n  /** handling selection of tags */\n  selectedHandler = (e, tagGi) => {\n    const ct = this.state.tags[tagGi];\n    const gisSelToggle = [tagGi];\n    const gisSelValue1 = []; //assigning the value of e.target.checked\n    const value1 = e.target.checked;\n    const gisIndetTrue = [];\n    const gisIndetFalse = [];\n    const gisSelTrue = [];\n    const gisSelFalse = [];\n    /** handling self and descendants */\n    if (ct.typeNode === true) {\n      gisSelValue1.push(...this.state.tagsMap.get(tagGi).descendantsAll);\n      gisIndetFalse.push(\n        tagGi,\n        ...this.state.tagsMap.get(tagGi).descendantsAllNodes\n      );\n    }\n    /** handling ancestors chain if any */\n    if (ct.parent) {\n      /** initializing values for ancestor chain analysis based on current selection\n       * DDS - direct descendants selected change value\n       * DDI - direct descendants indeterminate change value\n       */\n      let childSelected,\n        childIndeterminate = 0,\n        totalDDS = 0,\n        totalDDI = 0;\n\n      if (e.target.checked) childSelected = 1;\n      else childSelected = 0;\n      let childGi = tagGi;\n      let parent = this.state.tags[this.state.tagsMap.get(tagGi).parent]; //parent tag object\n      while (parent) {\n        /** getting max as number of descendants */\n        \n        const maxDD = this.state.tagsMap.get(parent.gi).descendantsDir.length;\n        /** analyzing direct descendants, value of the changed child are taken from the initialized values or from the previous cycle of the loop */\n        if (maxDD > 1) {\n          let currDescSelected, currDescIndet;\n          for (const descGi of this.state.tagsMap.get(parent.gi)\n            .descendantsDir) {\n            const descendant = this.state.tags[descGi];\n            if (descGi !== childGi) {\n              currDescSelected = Number(descendant.selected);\n              currDescIndet = Number(descendant.indeterminate);\n            } else {\n              currDescSelected = childSelected;\n              currDescIndet = childIndeterminate;\n            }\n            totalDDS += currDescSelected;\n            totalDDI += currDescIndet;\n          }\n        } else {\n          totalDDS = childSelected;\n          totalDDI = childIndeterminate;\n        }\n        console.log(`${parent.name}: chGi - ${childGi}, chS - ${childSelected}, chI - ${childIndeterminate} maxDD - ${maxDD}, DDS - ${totalDDS}, DDI - ${totalDDI}`);\n        if (totalDDS === maxDD) {\n          childSelected = 1;\n          childIndeterminate = 0;\n          gisSelTrue.push(parent.gi);\n          gisIndetFalse.push(parent.gi);\n        } else if (totalDDS === 0 && totalDDI === 0) {\n          childSelected = 0;\n          childIndeterminate = 0;\n          gisSelFalse.push(parent.gi);\n          gisIndetFalse.push(parent.gi);\n        } else if ((totalDDS > 0 && totalDDS < maxDD) || totalDDI > 0) {\n          childSelected = 0;\n          childIndeterminate = 1;\n          gisSelFalse.push(parent.gi);\n          gisIndetTrue.push(parent.gi);\n        }\n\n        if (parent.parent) {\n          childGi = parent.gi;\n          parent = this.state.tags[this.state.tagsMap.get(parent.gi).parent];\n          \n          totalDDS = 0;\n          totalDDI = 0;\n        } else break;\n      }\n    }\n    this.stateUpdate([\n      {\n        key: 'selected',\n        type: 'toggle',\n        value: null,\n        gis: gisSelToggle,\n      },\n      {\n        key: 'selected',\n        type: 'new',\n        value: value1,\n        gis: gisSelValue1,\n      },\n      {\n        key: 'selected',\n        type: 'new',\n        value: true,\n        gis: gisSelTrue,\n      },\n      {\n        key: 'selected',\n        type: 'new',\n        value: false,\n        gis: gisSelFalse,\n      },\n      {\n        key: 'indeterminate',\n        type: 'new',\n        value: false,\n        gis: gisIndetFalse,\n      },\n      {\n        key: 'indeterminate',\n        type: 'new',\n        value: true,\n        gis: gisIndetTrue,\n      },\n    ]);\n  };\n\n  treeExpansionHandler = () => {\n    this.setState({\n      treeExpanded: !this.state.treeExpanded,\n    });\n  };\n\n  nodeExpandClickHandler = (e, tagGi, expanded) => {\n    /** if not expanded - toggling expanded and toggling visible of direct descendents, if expanded - toggling expanded (if applicable) and visibility of all descendants */\n    if (!expanded) {\n      this.stateUpdate([\n        {\n          key: 'expanded',\n          type: 'new',\n          value: true,\n          gis: [tagGi],\n        },\n        {\n          key: 'visible',\n          type: 'new',\n          value: true,\n          gis: this.state.tagsMap.get(tagGi).descendantsDir,\n        },\n      ]);\n    } else {\n      const gisExpand = [tagGi];\n      gisExpand.push(...this.state.tagsMap.get(tagGi).descendantsAllNodes);\n      const gisVisible = [];\n      gisVisible.push(...this.state.tagsMap.get(tagGi).descendantsAll);\n\n      this.stateUpdate([\n        {\n          key: 'expanded',\n          type: 'new',\n          value: false,\n          gis: gisExpand,\n        },\n        {\n          key: 'visible',\n          type: 'new',\n          value: false,\n          gis: gisVisible,\n        },\n      ]);\n    }\n  };\n  /** Updating value based on array of gis, name of the value and value.\n   * Types of the update: (1) new (default), (2) togle, (3) increment, (4) function (function that takes gi as an argument)\n   */\n  stateUpdate(updates) {\n    this.setState((prevState) => {\n      const tags = [...prevState.tags];\n      /** map of tags to update - deep cloning for immutability */\n      const tagsToUpdate = new Map();\n      for (const { gis } of updates) {\n        for (const gi of gis) {\n          const tag = { ...prevState.tags[gi] };\n          tagsToUpdate.set(gi, tag);\n        }\n      }\n      /** updating values */\n      for (const { key, type, value, gis } of updates) {\n        for (const gi of gis) {\n          switch (type) {\n            case 'increment':\n              tagsToUpdate.get(gi)[key] = prevState.tags[gi][key] + value;\n              break;\n            case 'function':\n              tagsToUpdate.get(gi)[key] = value(gi);\n              break;\n            case 'toggle':\n              tagsToUpdate.get(gi)[key] = !prevState.tags[gi][key];\n              break;\n            default:\n              tagsToUpdate.get(gi)[key] = value;\n          }\n\n          tags[gi] = tagsToUpdate.get(gi);\n        }\n      }\n      return { tags };\n    });\n  }\n\n  selectedIdsHandler = (selectedTags) => {\n    const selectedIdsSet = new Set();\n    const selectedIdsEP = [];\n    for (const tag of selectedTags) {\n      if (this.state.tagsMap.get(tag.gi).ancestors) {\n        const ancGis = this.state.tagsMap.get(tag.gi).ancestors;\n        for (let i = ancGis.length - 1; i >= 0; i--) {\n          selectedIdsSet.add(this.state.tags[ancGis[i]]._id);\n        }\n      }\n      selectedIdsSet.add(tag._id);\n      selectedIdsEP.push(tag._id);\n    }\n    this.props.selectedTagsIdsHandler(\n      Array.from(selectedIdsSet),\n      selectedIdsEP\n    );\n  };\n\n  tagEditClick = (e, tagGi) => {\n    const tag = {};\n    tag.name = this.state.tags[tagGi].name;\n    tag.description = this.state.tags[tagGi].description;\n    tag.level = this.state.tags[tagGi].level;\n    tag._id = this.state.tags[tagGi]._id;\n    tag.ancestorsIds = this.state.tags[tagGi].ancestors;\n    /** getting ancestors names for fullpath if any\n     * and getting array of siblings to check against input\n     */\n    const ancestorsGis = this.state.tagsMap.get(tagGi).ancestors;\n    if (ancestorsGis) {\n      const ancestorsNames = [];\n      for (let i = ancestorsGis.length - 1; i >= 0; i--) {\n        ancestorsNames.push(this.state.tags[ancestorsGis[i]].name);\n      }\n      tag.ancestorsNames = ancestorsNames.join('/');\n      const parentGi = ancestorsGis[0];\n      const siblingsGis = this.state.tagsMap.get(parentGi).descendantsDir;\n      const siblingsNames = [];\n      for (const siblingGi of siblingsGis) {\n        siblingsNames.push(this.state.tags[siblingGi].name.toUpperCase());\n      }\n      tag.siblingsNames = siblingsNames.filter(\n        (siblingName) => siblingName !== tag.name.toUpperCase()\n      );\n    }\n    this.props.tagEditClick(tag);\n  };\n\n  tagAddChildClick = (e, tagGi) => {\n    const tag = {};\n    tag.level = +this.state.tags[tagGi].level + 1;\n    tag.ancestorsIds = [];\n    if (this.state.tags[tagGi].ancestors)\n      tag.ancestorsIds.push(...this.state.tags[tagGi].ancestors);\n    tag.ancestorsIds.push(this.state.tags[tagGi]._id);\n    tag.parentId = this.state.tags[tagGi]._id;\n    /** getting ancestors names for fullpath if any\n     * and getting array of siblings to check against input\n     */\n    const ancestorsGis = this.state.tagsMap.get(tagGi).ancestors;\n    let ancestorsNames = [];\n    if (ancestorsGis) {\n      for (let i = ancestorsGis.length - 1; i >= 0; i--) {\n        ancestorsNames.push(this.state.tags[ancestorsGis[i]].name);\n      }\n    }\n    ancestorsNames.push(this.state.tags[tagGi].name);\n    tag.ancestorsNames = ancestorsNames.join('/');\n    const siblingsGis = this.state.tagsMap.get(tagGi).descendantsDir;\n    if (siblingsGis.length > 0) {\n      tag.siblingsNames = [];\n      for (const siblingGi of siblingsGis) {\n        tag.siblingsNames.push(this.state.tags[siblingGi].name.toUpperCase());\n      }\n     \n    }\n\n    this.props.tagAddChildClick(tag);\n  };\n\n  tagAddClick = () => {\n    const tag = {};\n    tag.level = 1;\n    tag.parentId = null;\n    tag.ancestorsIds = null;\n    tag.ancestorsNames = null;\n    const siblingsGis = [];\n    for (const tag of this.state.tags) {\n      if (tag.level === 1) siblingsGis.push(tag.gi);\n    }\n    \n    if (siblingsGis.length > 0) {\n      tag.siblingsNames = [];\n      for (const siblingGi of siblingsGis) {\n        tag.siblingsNames.push(this.state.tags[siblingGi].name.toUpperCase());\n      }\n\n    }\n\n\n    this.props.tagAddChildClick(tag);\n  }\n\n  tagDeleteClick = (e, tagGi) => {\n    const tagsIds = [];\n    tagsIds.push(this.state.tags[tagGi]._id);\n    /** if descendants we add their ids to the array */\n    if (this.state.tagsMap.get(tagGi).descendantsAll.length > 0) {\n      this.state.tagsMap.get(tagGi).descendantsAll.forEach((descGi) => {\n        tagsIds.push(this.state.tags[descGi]._id);\n      })\n    }\n\n    /** passing current tag and descendants tag ids */\n    this.props.tagDeleteClick(tagsIds)\n  }\n\n  render() {\n    /** tree expanding */\n    let tagsTree;\n    if (this.state.treeExpanded) {\n      tagsTree = (\n        <TagsTree\n          tags={this.state.tags}\n          selectedHandler={this.selectedHandler}\n          nodeExpandClickHandler={this.nodeExpandClickHandler}\n          mode={this.props.mode}\n          tagEditClick={this.tagEditClick}\n          tagAddChildClick={this.tagAddChildClick}\n          tagDeleteClick={this.tagDeleteClick}\n        />\n      );\n    } else tagsTree = null;\n    /** selection tags */\n    const tagsSelected = tagsParseSelection(this.state.tags);\n\n    return (\n      <div className={classes.TagsBox}>\n        <div className={classes.TagsSelection}>\n          <TagsSelection\n          tagsSelected={tagsSelected}\n          treeExpansionClick={this.treeExpansionHandler}\n          treeExpanded={this.state.treeExpanded}\n          selectedHandler={this.selectedHandler}\n          showSelectionBox={this.props.showSelectionBox}\n          tagAddClick={this.tagAddClick}\n          mode={this.props.mode}\n        />\n        </div>\n        <div className={classes.TagsTree}>\n          {tagsTree}\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default TagsManager;\n","import React from 'react';\n\nimport classes from './Input.module.scss';\n\nconst Input = props => {\n  let inputElement = null;\n\n  const inputClasses = ['Input'];\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push('Invalid');\n  }\n\n  switch (props.elementType) {\n    case 'input':\n      inputElement = (\n        <label><span>{props.label}</span>\n          \n          <input\n            type={props.elementConfig.type}\n            className={inputClasses.join(' ')}\n            {...props.elementConfig}\n            value={props.value}\n            onChange={props.changed}\n          />\n        </label>\n      );\n      break;\n    case 'textarea':\n      inputElement = (\n        <label><span>{props.label}</span>\n          \n          <textarea\n            className={inputClasses.join(' ')}\n            {...props.elementConfig}\n            value={props.value}\n            onChange={props.changed}\n          />\n        </label>\n      );\n      break;\n\n    case 'select':\n      //let defaultValue;\n      const options = props.elementConfig.options.map(option => {\n        if (option.value === '_any' && !props.showAny) return null;\n        else return (\n          <option key={option.value} value={option.value}>\n            {option.presentation.rus}\n          </option>\n        );\n      });\n      inputElement = (\n        <label>\n          <span>{props.label}</span>\n          \n          <select defaultValue={props.defaultValue} onChange={props.changed}>\n            {options}\n          </select>\n        </label>\n      );\n      break;\n\n    default:\n      inputElement = (\n        <label>\n          <input\n            className={inputClasses.join(' ')}\n            {...props.elementConfig}\n            value={props.value}\n          />\n        </label>\n      );\n  }\n\n  return <div className={classes.Input}>{inputElement}</div>\n};\n\nexport default Input;\n","import React from 'react';\n\nimport classes from './Button.module.scss';\n\nconst Button = props => (\n  <button\n    className={[classes.Button, classes[props.btnType]].join(' ')}\n    onClick={props.clicked}\n    disabled={props.disabled}\n  >\n    {props.children}\n  </button>\n);\n\nexport default Button;\n","import React, { Component } from 'react';\n\nimport axiosInstance from '../../axios';\nimport classes from './Main.module.scss';\nimport EntryLine from '../../components/EntryLine/EntryLine';\nimport selectOptions from '../../utils/selectOptions';\nimport TagsManager from '../Tags/TagsManager';\nimport Input from '../../components/FormElements/Input';\nimport Button from '../../components/FormElements/Button';\n\nclass Main extends Component {\n  state = {\n    filterConfig: {\n      selectedTagsSearch: this.props.filterConfig.selectedTagsSearch, //search representation of tags id - includes ancestors\n      selectedTagsEP: this.props.filterConfig.selectedTagsEP, // ids of tags endpoints only\n      importance: this.props.filterConfig.importance,\n      status: this.props.filterConfig.status,\n      date1: this.props.filterConfig.date1,\n      date2: this.props.filterConfig.date2,\n    },\n    selectedTagsSearch: this.props.filterConfig.selectedTagsSearch, //search representation of tags id - includes ancestors\n    selectedTagsEP: this.props.filterConfig.selectedTagsEP,\n    editForm: {\n      date1: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'date',\n        },\n        value: this.props.filterConfig.date1,\n        label: 'От даты (включительно)',\n      },\n      date2: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'date',\n        },\n        value: this.props.filterConfig.date2,\n        label: 'До даты (включительно)',\n      },\n      importance: {\n        elementType: 'select',\n        elementConfig: {\n          options: selectOptions.importance,\n        },\n        label: 'Важность',\n        value: this.props.filterConfig.importance,\n        defaultValue: this.props.filterConfig.importance,\n      },\n      status: {\n        elementType: 'select',\n        elementConfig: {\n          options: selectOptions.status,\n        },\n        label: 'Статус',\n        value: this.props.filterConfig.status,\n        defaultValue: this.props.filterConfig.status,\n      },\n    },\n    filterRelevant: true,\n    entries: [],\n    entriesVisMap: new Map(),\n  };\n\n  componentDidMount() {\n    axiosInstance\n      .get('/api/entriesAll')\n      .then((response) => {\n        const entries = response.data;\n        this.entriesFiltering(entries);\n        this.setState({ entries });\n      })\n      .catch((e) => {\n        console.log('MAIN: Error loading entries');\n      });\n  }\n\n  componentWillUnmount() {\n    this.props.configStateHandler(this.state.filterConfig);\n  }\n\n  selectedTagsHandler = (selectedTagsSearch, selectedTagsEP) => {\n    /** Managing state of selected tags _ids */\n\n    this.setState((currState) => {\n      /** preventing toggle of the filterRelevant on initial selection of all level 1 tags */\n      let filterRelevant;\n      if (\n        currState.selectedTagsEP[0] === '_all' ||\n        currState.selectedTagsSearch[0] === '_all'\n      ) {\n        filterRelevant = true;\n        const filterConfig = { ...currState.filterConfig };\n        filterConfig.selectedTagsEP = selectedTagsEP;\n        filterConfig.selectedTagsSearch = selectedTagsSearch;\n        return {\n          filterConfig,\n          selectedTagsEP,\n          selectedTagsSearch,\n          filterRelevant,\n        };\n      }\n\n      const nextSelectedTagsEP = selectedTagsEP.join();\n      const nextSelectedTagsSearch = selectedTagsSearch.join();\n      const currSelectedTagsEP = currState.selectedTagsEP.join();\n      const currSelectedTagsSearch = currState.selectedTagsSearch.join();\n\n      if (\n        nextSelectedTagsEP !== currSelectedTagsEP &&\n        nextSelectedTagsSearch !== currSelectedTagsSearch\n      ) {\n        if (\n          currState.selectedTagsEP[0] === '_all' ||\n          currState.selectedTagsSearch[0] === '_all' ||\n          selectedTagsSearch.length === 0 ||\n          selectedTagsEP.length === 0\n        ) {\n          filterRelevant = true;\n        } else filterRelevant = false;\n\n        return {\n          selectedTagsEP,\n          selectedTagsSearch,\n          filterRelevant,\n        };\n      } else {\n        return null;\n      }\n    });\n  };\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    /** checking correctness of dates */\n    let filterRelevant;\n    if (inputIdentifier === 'date1') {\n      const currDate2 = new Date(this.state.editForm.date2.value).getTime();\n      const nextDate1 = new Date(event.target.value).getTime();\n      if (\n        Number.isNaN(currDate2) ||\n        Number.isNaN(nextDate1) ||\n        nextDate1 <= currDate2\n      ) {\n        filterRelevant = false;\n      } else {\n        filterRelevant = true;\n      }\n    } else if (inputIdentifier === 'date2') {\n      const currDate1 = new Date(this.state.editForm.date1.value).getTime();\n      const nextDate2 = new Date(event.target.value).getTime();\n      if (\n        Number.isNaN(currDate1) ||\n        Number.isNaN(nextDate2) ||\n        currDate1 <= nextDate2\n      ) {\n        filterRelevant = false;\n      } else {\n        filterRelevant = true;\n      }\n    } else filterRelevant = false;\n\n    const updatedEditForm = {\n      ...this.state.editForm,\n    };\n    const updatedFormElement = {\n      ...updatedEditForm[inputIdentifier],\n    };\n    updatedFormElement.value = event.target.value;\n    updatedEditForm[inputIdentifier] = updatedFormElement;\n\n    this.setState({ editForm: updatedEditForm, filterRelevant });\n  };\n\n  entryDeleteHandler = (e, id) => {\n    axiosInstance\n      .delete('/api/deleteEntry/' + id)\n      .then((response) => {\n        return axiosInstance.get('/api/entriesAll');\n      })\n      .then((response) => {\n        const entries = response.data;\n        this.setState({ entries });\n      })\n      .catch((e) => {\n        console.log(e.response);\n      });\n  };\n\n  entriesFiltering = (\n    entries = this.state.entries,\n    filterConfig = this.state.filterConfig\n  ) => {\n    const entriesVisMap = new Map();\n    entries.forEach((entry, entryIndex) => {\n      let tagsCheck = false,\n        date1Check = true,\n        date2Check = true,\n        importanceCheck = true,\n        statusCheck = true;\n      /** checking if any of tags is present in entry searchtags array */\n      for (const tag of filterConfig.selectedTagsEP) {\n        if (entry.selectedTagsSearch.includes(tag)) {\n          tagsCheck = true;\n          break;\n        } else continue;\n      }\n      /** checking dates */\n      const entryDate = new Date(entry.date).getTime();\n      const date1 = new Date(filterConfig.date1).getTime();\n      const date2 = new Date(filterConfig.date2).getTime();\n      if (!Number.isNaN(date1)) date1Check = entryDate >= date1;\n      if (!Number.isNaN(date2)) date2Check = entryDate <= date2;\n      /** checking importance and status */\n      if (filterConfig.importance !== '_any') {\n        importanceCheck = entry.importance === filterConfig.importance;\n      }\n      if (filterConfig.status !== '_any') {\n        statusCheck = entry.status === filterConfig.status;\n      }\n\n      /** setting new Visibility Map */\n      entriesVisMap.set(\n        entry._id,\n        tagsCheck && date1Check && date2Check && importanceCheck && statusCheck\n      );\n    });\n    this.setState({\n      entriesVisMap,\n    });\n  };\n\n  entriesFilterHandler = () => {\n    //we need to setState of FilterConfig here to ensure sync between entrylines and filterconfig\n    const filterConfig = { ...this.state.filterConfig };\n    filterConfig.date1 = this.state.editForm.date1.value;\n    filterConfig.date2 = this.state.editForm.date2.value;\n    filterConfig.importance = this.state.editForm.importance.value;\n    filterConfig.status = this.state.editForm.status.value;\n    filterConfig.selectedTagsEP = [...this.state.selectedTagsEP];\n    filterConfig.selectedTagsSearch = [...this.state.selectedTagsSearch];\n    this.entriesFiltering(undefined, filterConfig);\n    this.setState({ filterConfig, filterRelevant: true });\n  };\n\n  render() {\n    /** filter */\n    const initSelTagsIds = this.props.filterConfig.selectedTagsEP;\n\n    const formElementsArray = [];\n    for (let key in this.state.editForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.editForm[key],\n      });\n    }\n    let form = formElementsArray.map((formElement) => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        label={formElement.config.label}\n        value={formElement.config.value}\n        defaultValue={formElement.config.defaultValue}\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n        showAny={true}\n      />\n    ));\n\n    /** building entrilines */\n    let entryLines;\n    let entriesToShow = 0;\n    entryLines = this.state.entries.map((entry, index) => {\n      /** checking entriesVisMap */\n      if (!this.state.entriesVisMap.get(entry._id)) return null;\n      entriesToShow++;\n      /** formatting of some fields: date, importance, status */\n      const dateObj = new Date(entry.date);\n      const date = dateObj\n        .getDate()\n        .toString()\n        .padStart(2, '0');\n      const month = (dateObj.getMonth() + 1).toString().padStart(2, '0');\n      const dateFormatted = date + '.' + month + '.' + dateObj.getFullYear();\n      const [{ presentation: importance }] = selectOptions.importance.filter(\n        (option) => option.value === entry.importance\n      );\n      const [{ presentation: status }] = selectOptions.status.filter(\n        (option) => option.value === entry.status\n      );\n      /** getting rendering result */\n      return (\n        <EntryLine\n          key={entry._id}\n          title={entry.title}\n          description={entry.description}\n          datePresent={dateFormatted}\n          date={entry.date}\n          importancePresent={importance.rus}\n          importance={entry.importance}\n          statusPresent={status.rus}\n          status={entry.status}\n          tags={entry.selectedTagsEP}\n          id={entry._id}\n          deleteClick={this.entryDeleteHandler}\n        />\n      );\n    });\n\n    if (!this.state.entries.length || entriesToShow === 0) {\n      entryLines = 'Нет записей, удовлетворяющих условиям!';\n    }\n\n    return (\n      <div className={classes.Main}>\n        <div className={classes.Filter}>\n          <div className={classes.TagsContainer}>\n            <TagsManager\n              selectedTagsIdsHandler={this.selectedTagsHandler}\n              initSelTagsIds={initSelTagsIds}\n              showSelectionBox={false}\n              mode='filter'\n            />\n          </div>\n          <div className={classes.Inputs}>{form}</div>\n          <div className={classes.Button}>\n            <Button\n              disabled={this.state.filterRelevant}\n              btnType='Success'\n              clicked={this.entriesFilterHandler}\n            >\n              Применить фильтр\n            </Button>\n          </div>\n        </div>\n        <div className={classes.EntryLines}>{entryLines}</div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","const validate = (value, rules) => {\n  let isValid = true;\n\t\n\tif (rules.required) {\n\t\tisValid = value.trim() !== '' && isValid;\n  }\n  if (rules.notEqualList) {\n    isValid = !rules.notEqualList.includes(value.toUpperCase()) && isValid;\n  }\n\n\tif (rules.number) {\n\t\tisValid = !Number.isNaN(value) && isValid;\n\t}\n\tif (rules.minLength) {\n\t\tisValid = value.length >= rules.minLength && isValid;\n\t}\n\tif (rules.min) {\n\t\tisValid = value >= rules.min && isValid;\n\t}\n\tif (rules.max) {\n\t\tisValid = value <= rules.max && isValid;\n\t}\n\treturn isValid;\n};\n\nexport default validate;","import React, { Component } from 'react';\n\nimport classes from './TagsEditor.module.scss';\nimport TagsManager from './TagsManager';\nimport Input from '../../components/FormElements/Input';\nimport Button from '../../components/FormElements/Button';\nimport validate from '../../utils/inputValidation';\nimport axiosInstance from '../../axios';\n\nclass TagsEditor extends Component {\n  state = {\n    initSelTagsIds: [],\n    currentTagId: '',\n    ancestorsIds: [],\n    parentId: '',\n    editForm: {\n      fullPath: {\n        elementType: 'input',\n        display: true,\n        elementConfig: {\n          type: 'text',\n          placeholder: null,\n          readOnly: true,\n        },\n        value: '',\n        label: 'Родительские тэги',\n        validation: null,\n        valid: true,\n        touched: false,\n      },\n      level: {\n        elementType: 'input',\n        display: true,\n        elementConfig: {\n          type: 'text',\n          placeholder: null,\n          readOnly: true,\n        },\n        value: '',\n        label: 'Уровень иерархии тэга',\n        validation: null,\n        valid: true,\n        touched: false,\n      },\n      name: {\n        elementType: 'input',\n        display: true,\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Название тэга ...',\n          readOnly: false,\n        },\n        value: '',\n        label: 'Название тэга',\n        validation: {\n          required: true,\n          notEqualList: null,\n        },\n        valid: false,\n        touched: false,\n      },\n      description: {\n        elementType: 'textarea',\n        display: true,\n        elementConfig: {\n          placeholder: 'Описание тэга, появляется при наведении курсора ...',\n        },\n        value: this.props.description,\n        label: 'Описание тэга',\n        validation: null,\n        valid: true,\n        touched: false,\n      },\n    },\n    editMode: {\n      type: null,\n      buttonName: '',\n      path: '/api/updateTag',\n    },\n    formIsValid: false,\n    result: {\n      visibility: false,\n      message: '',\n      payload: '',\n    },\n    tagsUpdated: false,\n  };\n\n  selectedTagsHandler() {\n    return null;\n  }\n\n  tagsUpdatedNotifier = () => {\n    this.setState((currState) => {\n      if (!currState.tagsUpdated) {\n        return null;\n      } else\n        return {\n          tagsUpdated: false,\n        };\n    });\n  };\n\n  tagEditHandler = (tag) => {\n    /** setting input values from the selected tag values */\n\n    const editForm = [];\n    let parentId;\n    for (let key in this.state.editForm) {\n      editForm[key] = { ...this.state.editForm[key] };\n    }\n    if (tag.ancestorsNames) {\n      editForm.fullPath.value = tag.ancestorsNames;\n      editForm.fullPath.display = true;\n      parentId = tag.ancestorsIds[tag.ancestorsIds.length - 1];\n    } else editForm.fullPath.display = false;\n    editForm.level.value = tag.level;\n    editForm.name.value = tag.name;\n    editForm.name.valid = true;\n    editForm.description.value = tag.description;\n    editForm.name.validation.notEqualList = tag.siblingsNames;\n    /** setting mode to 'edit' to change button name*/\n    const editMode = {\n      type: 'edit',\n      buttonName: 'Редактировать',\n      path: '/api/updateTag',\n    };\n\n    this.setState({\n      currentTagId: tag._id,\n      ancestorsIds: tag.ancestorsIds,\n      parentId,\n      editForm,\n      editMode,\n      formIsValid: true,\n    });\n  };\n\n  tagAddChildHandler = (tag) => {\n    /** setting input values from the selected tag values */\n    const editForm = [];\n    let parentId = tag.parentId;\n    for (let key in this.state.editForm) {\n      editForm[key] = { ...this.state.editForm[key] };\n    }\n    if (tag.ancestorsNames) {\n      editForm.fullPath.value = tag.ancestorsNames;\n      editForm.fullPath.display = true;\n    } else {\n      editForm.fullPath.value = null;\n      editForm.fullPath.display = false;\n    }\n\n    editForm.level.value = tag.level;\n    editForm.name.value = '';\n    editForm.description.value = '';\n    editForm.name.validation.notEqualList = tag.siblingsNames;\n    console.log(tag.siblingsNames);\n    /** setting mode to 'edit' to change button name*/\n    const editMode = {\n      type: 'add',\n      buttonName: 'Добавить',\n      path: '/api/postTag',\n    };\n\n    this.setState({\n      currentTagId: undefined,\n      ancestorsIds: tag.ancestorsIds,\n      parentId,\n      editForm,\n      editMode,\n      formIsValid: false,\n    });\n  };\n\n  tagDeleteHandler = (tagsIds) => {\n    console.log(tagsIds);\n    axiosInstance\n      .post('/api/deleteTag', {\n        ids: tagsIds,\n      })\n      .then((response) => {\n        const newResult = {\n          ...this.state.result,\n        };\n        newResult.visibility = true;\n        if (response.data) {\n          newResult.payload = response.data.payload;\n          if (response.data.type === 'deleteTagUnsuccess') {\n            newResult.message = 'Не удалось удалить тэг. К нему или его потомкам привязаны записи в количестве';\n          } else if (response.data.type === 'deleteTagSuccess') {\n            newResult.message = 'Успешно удален(ы) тэг(и) в количестве';\n          } else if (response.data.type === 'error') {\n            newResult.message = 'Произошла ошибка';\n          }\n        }\n        this.setState({ tagsUpdated: true, result: newResult });\n      })\n      .catch((e) => {\n        const newResult = {\n          ...this.state.result,\n        };\n        \n        newResult.payload = `${e.message}`;\n        newResult.visibility = true;\n        newResult.message = `При транзакции возникла проблема`;\n        this.setState({ result: newResult });\n      });\n  };\n\n  tagPostHandler = () => {\n    axiosInstance\n      .post(this.state.editMode.path, {\n        _id: this.state.currentTagId,\n        name: this.state.editForm.name.value,\n        description: this.state.editForm.description.value,\n        level: this.state.editForm.level.value,\n        ancestors: this.state.ancestorsIds,\n        parent: this.state.parentId,\n      })\n      .then((response) => {\n        const newResult = {\n          ...this.state.result,\n        };\n        newResult.visibility = true;\n        if (response.data) {\n          newResult.payload = response.data.payload;\n          if (response.data.type === 'addTagSuccess') {\n            newResult.message = 'Добавлен новый тэг';\n          } else if (response.data.type === 'updateTagSuccess') {\n            newResult.message = 'Отредактирован тэг';\n          } else if (response.data.type === 'error') {\n            newResult.message = 'Произошла ошибка';\n          }\n        }\n\n        this.setState({ tagsUpdated: true, result: newResult });\n      })\n      .catch((e) => {\n        const newResult = {\n          ...this.state.result,\n        };\n        console.log(e.response);\n        newResult.payload = `Ошибка: ${e.message}`;\n        newResult.visibility = true;\n        newResult.message = `При транзакции возникла проблема`;\n        this.setState({ result: newResult });\n      });\n  };\n\n  inputChangedHandler(event, inputIdentifier) {\n    const updatedEditForm = {\n      ...this.state.editForm,\n    };\n    const updatedFormElement = {\n      ...updatedEditForm[inputIdentifier],\n    };\n    updatedFormElement.value = event.target.value;\n    if (updatedFormElement.validation) {\n      updatedFormElement.valid = validate(\n        updatedFormElement.value,\n        updatedFormElement.validation\n      );\n    }\n    updatedFormElement.touched = true;\n    updatedEditForm[inputIdentifier] = updatedFormElement;\n    let formIsValid = true;\n    for (let inputIdentifier in updatedEditForm) {\n      formIsValid = updatedEditForm[inputIdentifier].valid && formIsValid;\n    }\n    this.setState({ editForm: updatedEditForm, formIsValid: formIsValid });\n  }\n\n  render() {\n    /** edit tag form */\n    let form, button;\n    if (this.state.editMode.type) {\n      const formElementsArray = [];\n      for (let key in this.state.editForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.editForm[key],\n        });\n      }\n      form = formElementsArray.map((formElement) => {\n        if (!formElement.config.display) return null;\n\n        return (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            label={formElement.config.label}\n            value={formElement.config.value}\n            defaultValue={formElement.config.defaultValue}\n            invalid={!formElement.config.valid}\n            touched={formElement.config.touched}\n            shouldValidate={formElement.config.validation}\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\n          />\n        );\n      });\n      /** button */\n\n      button = (\n        <Button\n          btnType='Success'\n          disabled={!this.state.formIsValid}\n          clicked={this.tagPostHandler}\n        >\n          {this.state.editMode.buttonName}\n        </Button>\n      );\n    }\n\n    /** message on the add/update transaction */\n    let resultOutput = null;\n    if (this.state.result.visibility) {\n      resultOutput = (\n        <React.Fragment>\n          <span>{this.state.result.message}: </span>\n          <span>{this.state.result.payload}</span>\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <div className={classes.EntryContainer}>\n        <div className={classes.TagsContainer}>\n          <TagsManager\n            selectedTagsIdsHandler={this.selectedTagsHandler}\n            initSelTagsIds={this.state.initSelTagsIds}\n            showSelectionBox={false}\n            mode='tagsEditor'\n            tagEditClick={this.tagEditHandler}\n            tagDeleteClick={this.tagDeleteHandler}\n            tagsUpdated={this.state.tagsUpdated}\n            tagsUpdatedNotifier={this.tagsUpdatedNotifier}\n            tagAddChildClick={this.tagAddChildHandler}\n            tagAddClick={this.tagAddHandler}\n          />\n        </div>\n        <div className={classes.InputsContainer}>{form}{button}\n        <div className={classes.ResultSection}>{resultOutput}</div>\n        </div>\n        \n        \n      </div>\n    );\n  }\n}\n\nexport default TagsEditor;\n","import React from 'react';\n\nimport Input from '../../components/FormElements/Input';\nimport Button from '../../components/FormElements/Button';\nimport classes from './EntryManager.module.scss';\nimport validate from '../../utils/inputValidation';\nimport TagsManager from '../Tags/TagsManager';\nimport axiosInstance from '../../axios';\nimport selectOptions from '../../utils/selectOptions';\n\nclass EntryManager extends React.Component {\n  state = {\n    /** Selection of tag _ids, current endpoint + ancestors */\n    selectedTagsSearch: [], //search representation of tags id - includes ancestors\n    selectedTagsEP: [], // ids of tags endpoints only\n    /** state related to inputs */\n    editForm: {\n      title: {\n        elementType: 'input',\n        display: true,\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Название записи ...',\n        },\n        value: this.props.title,\n        label: 'Название записи',\n        validation: {\n          required: true,\n        },\n        valid: this.props.mode === 'edit',\n        touched: false,\n      },\n      description: {\n        elementType: 'textarea',\n        elementConfig: {\n          placeholder: 'Содержание записи ...',\n        },\n        value: this.props.description,\n        label: 'Детальное содержание',\n        validation: null,\n        valid: true,\n        touched: false,\n      },\n      date: {\n        elementType: 'input',\n        display: true,\n        elementConfig: {\n          type: 'date',\n        },\n        value: new Date(this.props.date).toISOString().substr(0, 10),\n        label: 'Дата',\n        validation: {\n          required: true,\n        },\n        valid: true,\n        touched: false,\n      },\n      importance: {\n        elementType: 'select',\n        elementConfig: {\n          options: selectOptions.importance,\n        },\n        label: 'Важность',\n        validation: null,\n        defaultValue: this.props.importance,\n        value: this.props.importance,\n        valid: true,\n      },\n      status: {\n        elementType: 'select',\n        elementConfig: {\n          options: selectOptions.status,\n        },\n        label: 'Статус',\n        validation: null,\n        defaultValue: this.props.status,\n        value: this.props.status,\n        valid: true,\n      },\n    },\n    formIsValid: this.props.formIsValid,\n    result: {\n      visibility: false,\n      message: '',\n      payload: '',\n    },\n  };\n\n  componentDidMount() {\n    /** here we should check the mode (to be sent by App or by Link from the list of entries and if mode is 'edit' update the state to reflect current entry ) */\n  }\n\n  selectedTagsHandler = (selectedTagsSearch, selectedTagsEP) => {\n    /** Managing state of selected tags _ids */\n    this.setState((currState) => {\n      const nextSelectedTagsEP = selectedTagsEP.join();\n      const nextSelectedTagsSearch = selectedTagsSearch.join();\n      const currSelectedTagsEP = currState.selectedTagsEP.join();\n      const currSelectedTagsSearch = currState.selectedTagsSearch.join();\n\n      if (\n        nextSelectedTagsEP !== currSelectedTagsEP &&\n        nextSelectedTagsSearch !== currSelectedTagsSearch\n      ) {\n        return {\n          selectedTagsSearch,\n          selectedTagsEP,\n        };\n      } else {\n        return;\n      }\n    });\n  };\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedEditForm = {\n      ...this.state.editForm,\n    };\n    const updatedFormElement = {\n      ...updatedEditForm[inputIdentifier],\n    };\n    updatedFormElement.value = event.target.value;\n    if (updatedFormElement.validation) {\n      updatedFormElement.valid = validate(\n        updatedFormElement.value,\n        updatedFormElement.validation\n      );\n    }\n    updatedFormElement.touched = true;\n    updatedEditForm[inputIdentifier] = updatedFormElement;\n    let formIsValid = true;\n    for (let inputIdentifier in updatedEditForm) {\n      formIsValid = updatedEditForm[inputIdentifier].valid && formIsValid;\n    }\n    this.setState({ editForm: updatedEditForm, formIsValid: formIsValid });\n  };\n\n  entryPostHandler = () => {\n    axiosInstance\n      .post(this.props.path, {\n        _id: this.props.id,\n        title: this.state.editForm.title.value,\n        description: this.state.editForm.description.value,\n        date: this.state.editForm.date.value,\n        importance: this.state.editForm.importance.value,\n        status: this.state.editForm.status.value,\n        selectedTagsSearch: this.state.selectedTagsSearch,\n        selectedTagsEP: this.state.selectedTagsEP,\n      })\n      .then((response) => {\n        const newResult = {\n          ...this.state.result,\n        };\n        newResult.visibility = true;\n        if (response.data) {\n          newResult.payload = response.data.payload;\n          if (response.data.type === 'addSuccess') {\n            newResult.message = 'Добавлена новая запись';\n          } else if (response.data.type === 'editSuccess') {\n            newResult.message = 'Отредактирована запись';\n          } else if (response.data.type === 'error') {\n            newResult.message = 'Произошла ошибка';\n          }\n        }\n\n        this.setState({ result: newResult });\n      })\n      .catch((e) => {\n        const newResult = {\n          ...this.state.result,\n        };\n        console.log(e.response);\n        newResult.payload = `${e.message}`;\n        newResult.visibility = true;\n        newResult.message = `При добавлении записи возникла проблема`;\n        this.setState({ result: newResult });\n      });\n  };\n\n  render() {\n    /** building inputs */\n\n    const formElementsArray = [];\n    for (let key in this.state.editForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.editForm[key],\n      });\n    }\n    let form = formElementsArray.map((formElement) => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        label={formElement.config.label}\n        value={formElement.config.value}\n        defaultValue={formElement.config.defaultValue}\n        invalid={!formElement.config.valid}\n        touched={formElement.config.touched}\n        shouldValidate={formElement.config.validation}\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n      />\n    ));\n    /** message on the add/update transaction */\n    let resultOutput = null;\n    if (this.state.result.visibility) {\n      resultOutput = (\n        <React.Fragment>\n          <span>{this.state.result.message}: </span>\n          <span>{this.state.result.payload}</span>\n        </React.Fragment>\n      );\n    }\n    /** determine the name of the button */\n    let buttonName;\n    switch (this.props.mode) {\n      case 'add': {\n        buttonName = 'Добавить';\n        break;\n      }\n      case 'edit': {\n        buttonName = 'Редактировать';\n        break;\n      }\n      default:\n        buttonName = 'Выбрать';\n    }\n\n    /** extracting ids from the initial selection of tags for edit mode */\n    let initSelTagsIds = [];\n    for (const tag of this.props.tags) {\n      initSelTagsIds.push(tag._id);\n    }\n\n    return (\n      <div className={classes.EntryContainer}>\n        <div className={classes.TagsContainer}>\n          <TagsManager\n            selectedTagsIdsHandler={this.selectedTagsHandler}\n            initSelTagsIds={initSelTagsIds}\n            showSelectionBox={true}\n            mode={'entryManager'}\n          />\n        </div>\n        <div className={classes.InputsContainer}>\n          {form}\n          <Button\n            btnType='Success'\n            disabled={\n              !(\n                Boolean(this.state.selectedTagsEP.length) &&\n                this.state.formIsValid\n              )\n            }\n            clicked={this.entryPostHandler}\n          >\n            {buttonName}\n          </Button>\n          <div className={classes.ResultSection}>{resultOutput}</div>\n        </div>\n\n        \n      </div>\n    );\n  }\n}\n\nexport default EntryManager;\n","import React from 'react';\n\nimport EntryManager from '../../containers/EntryManager/EntryManager';\n\nconst EditEntry = props => {\n  console.log(props);\n  return (\n    <EntryManager\n      {...props.location.state.entryData}\n      mode='edit'\n      path='/api/updateEntry'\n      formIsValid={true}\n    />\n  );\n};\n\nexport default EditEntry;\n","import React from 'react';\n\nimport EntryManager from '../../containers/EntryManager/EntryManager';\n\nconst EditEntry = props => {\n  \n  return (\n    <EntryManager\n      title=\"\"\n      description=\"\"\n      date={new Date().toISOString().substr(0, 10)}\n      importance=\"medium\"\n      status=\"notStarted\"\n      tags={[]}\n      mode='add'\n      path='/api/postEntry'\n      formIsValid={false}\n    />\n  );\n};\n\nexport default EditEntry;\n\n","import React from 'react';\nimport { Route, NavLink, Switch, Redirect } from 'react-router-dom';\n\nimport classes from './App.module.scss';\nimport Main from './containers/Main/Main';\nimport TagsEditor from './containers/Tags/TagsEditor';\nimport EditEntry from './components/Wrappers/EditEntry';\nimport AddEntry from './components/Wrappers/AddEntry';\n\nclass App extends React.Component {\n  state = {\n    filterConfig: {\n      selectedTagsSearch: ['_all'], //search representation of tags id - includes ancestors\n      selectedTagsEP: ['_all'], // ids of tags endpoints only\n      importance: '_any',\n      status: '_any',\n      date1: '',\n      date2: '',\n    },\n  };\n\n  stateHandler = (filterConfig) => {\n    this.setState({\n      filterConfig: { ...filterConfig }, //destructuring?\n    });\n  };\n\n  render() {\n    return (\n      <div className={classes.App}>\n        <header className={classes.AppHeader}>\n          <nav>\n            <ul>\n              <li>\n                <NavLink activeStyle={{ textDecoration: 'underline' }} to='/' exact>\n                  Главная\n                </NavLink>\n              </li>\n              <li>\n                <NavLink activeStyle={{ textDecoration: 'underline' }} to='/addEntry' exact>\n                  Новая запись\n                </NavLink>\n              </li>\n              <li>\n              <NavLink activeStyle={{ textDecoration: 'underline' }} to='/editTag' exact>\n                  Редактор тэгов\n                </NavLink>\n              </li>\n             \n            </ul>\n          </nav>\n        </header>\n        <main>\n          <Switch>\n            <Route\n              path='/'\n              exact\n              render={(props) => (\n                <Main\n                  {...props}\n                  filterConfig={this.state.filterConfig}\n                  configStateHandler={this.stateHandler}\n                />\n              )}\n            />\n            <Route path='/editEntry' component={EditEntry} />\n            <Route path='/addEntry' component={AddEntry} />\n            <Route path='/editTag' component={TagsEditor} />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((<BrowserRouter><App /></BrowserRouter>), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}